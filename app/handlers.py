from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import logging

import app.keyboards as kb
import app.database.requests as rq
from utils.text_for_bots import *
from app.states import TestStates
from utils.data import words, options_main

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

router = Router()
# –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_message_ids = {}

async def send_or_edit_message(bot, user_id, user_message_id, text, reply_markup):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
    """
    try:
        if user_message_id:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_text(
                chat_id=user_id, 
                message_id=user_message_id, 
                text=text, 
                reply_markup=reply_markup, 
                parse_mode=ParseMode.HTML
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ ID
            sent_message = await bot.send_message(
                user_id, 
                text, 
                reply_markup=reply_markup, 
                parse_mode=ParseMode.HTML
            )
            user_message_ids[user_id] = sent_message.message_id
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        logging.error(f"Error editing or sending message: {e}")
    
@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_id = message.from_user.id
    create = await rq.set_user(user_id, message.from_user.full_name)
    formatted_message = start_messages.format(name=message.from_user.full_name) if create else "‚úçÔ∏è <b>–ï–≥—ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫</b>"

    sent_message = await message.bot.send_message(
        chat_id=user_id,
        text=formatted_message,
        reply_markup=await kb.main_menu(),
        parse_mode=ParseMode.HTML
    )
    user_message_ids[user_id] = sent_message.message_id  

    await message.delete() 
    
@router.message(Command(commands='help'))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é.
    """
    await message.delete()
    await message.answer(f'{help_messages}')

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–£–¥–∞—Ä–µ–Ω–∏–µ, –°–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ç.–¥.)
    """
    await callback.answer()
    category_name = callback.data.split('_')[1]
    text = f"{options_main.get(category_name)}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {await rq.get_user_mistake_count(callback.from_user.id, category_name)}"

    await send_or_edit_message(callback.message.bot, callback.from_user.id, user_message_ids.get(callback.from_user.id), text, await kb.button_categories(category_name))

@router.callback_query(F.data == 'go_main')
async def go_main(callback: CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await send_or_edit_message(callback.message.bot, callback.from_user.id, user_message_ids.get(callback.from_user.id), "‚úçÔ∏è <b>–ï–≥—ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫</b>", await kb.main_menu())
    await callback.answer()

@router.callback_query(F.data.startswith('start_'))
async def start_test(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    try:
        category = callback.data.split('_')[1]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
        words1, words_dop = words.get(category, ([], [])) 
        
        if not words1 or not words_dop:
            await callback.message.answer(
                "–¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            category=category, 
            used_words=[], 
            current_pair=[], 
            words=words1,
            words_dop=words_dop
        )

        await state.set_state(TestStates.answering_question)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await send_next_question(callback.message, state)
    
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )

@router.callback_query(F.data.startswith('error_'))
async def start_error_correction(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.
    """
    try:
        category = callback.data.split('_')[1]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        errors = await rq.get_user_mistakes(callback.from_user.id, category)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫
        if not errors:
            await callback.message.edit_text(
                "üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"close_{category}")]
                    ]
                )
            )
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        all_paronyms_error = [error.get('all_paronyms', []) for error in errors] if category == 'paronyms' else []
        words_error = [error.get('words', []) for error in errors]
        words_dop_error = [error.get('words_dop', []) for error in errors]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            category=category,
            used_words=[],
            current_pair=[],
            words=words_error,
            words_dop=words_dop_error,
            all_paronyms=all_paronyms_error,
            is_error_correction=True
        )

        await state.set_state(TestStates.answering_question)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await send_next_question(callback.message, state)

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_error_correction: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"close_{category}")]
                ]
            )
        )

async def send_next_question(message: Message, state: FSMContext, result_message: str = ''):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    try:
        data = await state.get_data()
        category_name = data.get('category')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ —Å–ª–æ–≤–∞
        if not data.get('words') or not data.get('words_dop'):
            finish_message = (
                "üí´ –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" 
                if data.get('is_error_correction') 
                else "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!"
            )
            text = f"{options_main.get(category_name, '')}\n\n{finish_message}"
            await message.edit_text(text, reply_markup=await kb.button_categories(category_name))
            await state.clear()
            return

        # –í—ã–±–æ—Ä –ø–∞—Ä—ã —Å–ª–æ–≤
        word_pair = random.choice(list(zip(data['words'], data['words_dop'])))
        words, words_dop = word_pair
        
        if category_name == 'paronyms':
            if not data.get('is_error_correction'):
                data['words'].remove(words)
                data['words_dop'].remove(words_dop)
                correct_paronym = random.choice(words)
                correct_explanation = words_dop[words.index(correct_paronym)]
            else:
                word_index = data['words'].index(words)
                correct_paronym = words
                words = data['all_paronyms'][word_index]
                correct_explanation = words_dop

            data['current_pair'] = correct_paronym
            data['paronyms'] = words
            data['correct_explanation'] = correct_explanation

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞
            answer_buttons = [
                InlineKeyboardButton(text=paronym, callback_data=f"paronym_{paronym}") for paronym in words
            ]
            answer_buttons.append(InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"close_{data['category']}"))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in answer_buttons])
            result_message = f"{result_message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ:\n\n{correct_explanation}" if result_message else f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ:\n\n{correct_explanation}"

        else:
            data['current_pair'] = (words, words_dop)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞
            answer_buttons = [
                InlineKeyboardButton(text=word, callback_data="correct" if word == words else "wrong")
                for word in random.sample([words, words_dop], 2)
            ]
            answer_buttons.append(InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"close_{data['category']}"))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[answer_buttons])
            result_message = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: " if not result_message else result_message

        await state.update_data(data)
        await message.edit_text(result_message, reply_markup=keyboard)

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_next_question: {e}")
        result_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
        await message.edit_text(result_message)

@router.callback_query(F.data.in_(['correct', 'wrong']))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
    –£–¥–∞–ª—è–µ—Ç –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞.
    """
    data = await state.get_data()
    correct_word, wrong_word = data.get('current_pair', (None, None))

    try:
        if callback.data == "correct":
            if data.get('is_error_correction'):
                # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                data['words'].remove(correct_word)
                data['words_dop'].remove(wrong_word)
                await rq.remove_user_mistake(callback.from_user.id, data['category'], correct_word)
            result_message = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            result_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word}"
            if not data.get('is_error_correction'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await rq.save_user_mistake(
                    callback.from_user.id, 
                    data['category'], 
                    wrong_word=wrong_word,
                    correct_word=correct_word
                )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        result_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."

    await send_next_question(callback.message, state, result_message)

@router.callback_query(F.data.startswith('paronym_'))
async def handle_paronyms_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–∞—Ä–æ–Ω–∏–º–∞–º.
    """
    try:
        data = await state.get_data()

        chosen_paronym = callback.data.split('_')[1]
        correct_paronym = data.get('current_pair')
        correct_explanation = data.get('correct_explanation')

        if chosen_paronym == correct_paronym:
            if data.get('is_error_correction'):
                data['words'].remove(correct_paronym)
                data['words_dop'].remove(correct_explanation)
                data['all_paronyms'].remove(data.get('paronyms'))

                await rq.remove_user_mistake(callback.from_user.id, data['category'], paronym_wrong=correct_paronym)
            result_message = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            result_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_paronym}"
            if not data.get('is_error_correction'):
                await rq.save_user_mistake(
                    callback.from_user.id, 
                    data['category'], 
                    wrong_word=correct_paronym,
                    all_paronyms=data.get('paronyms'),
                    explanation=correct_explanation
                )

        await send_next_question(callback.message, state, result_message)
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_paronyms_answer: {e}")
        result_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."

        await send_next_question(callback.message, state, result_message)

@router.callback_query(F.data.startswith('close_'))
async def close_test(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    """
    category_name = callback.data.split('_')[1]
    text = options_main.get(category_name, "")
    user_id = callback.from_user.id
    mistake_count = await rq.get_user_mistake_count(user_id, category_name)
    text = f"{text}\n\nüìö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {mistake_count}"
    
    await state.clear()
    await callback.message.edit_text(text=text, reply_markup=await kb.button_categories(category_name))